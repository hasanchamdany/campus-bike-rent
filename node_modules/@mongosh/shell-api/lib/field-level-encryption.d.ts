/// <reference types="node" />
import { ShellApiWithMongoClass } from './decorators';
import { ClientEncryption as MongoCryptClientEncryption, ClientEncryptionDataKeyProvider, ClientEncryptionEncryptOptions, ClientEncryptionTlsOptions, KMSProviders, AWSEncryptionKeyOptions, AzureEncryptionKeyOptions, GCPEncryptionKeyOptions } from '@mongosh/service-provider-core';
import type { Document, BinaryType } from '@mongosh/service-provider-core';
import Cursor from './cursor';
import { DeleteResult } from './result';
import { asPrintable } from './enums';
import type Mongo from './mongo';
export declare type ClientSideFieldLevelEncryptionKmsProvider = Omit<KMSProviders, 'local'> & {
    local?: {
        key: Buffer | string | BinaryType;
    };
};
export interface ClientSideFieldLevelEncryptionOptions {
    keyVaultClient?: Mongo;
    keyVaultNamespace: string;
    kmsProviders: ClientSideFieldLevelEncryptionKmsProvider;
    schemaMap?: Document;
    bypassAutoEncryption?: boolean;
    explicitEncryptionOnly?: boolean;
    tlsOptions?: {
        [k in keyof ClientSideFieldLevelEncryptionKmsProvider]?: ClientEncryptionTlsOptions;
    };
    encryptedFieldsMap?: Document;
    bypassQueryAnalysis?: boolean;
}
declare type MasterKey = AWSEncryptionKeyOptions | AzureEncryptionKeyOptions | GCPEncryptionKeyOptions;
declare type AltNames = string[];
declare type DataKeyEncryptionKeyOptions = {
    masterKey?: MasterKey;
    keyAltNames?: AltNames;
    keyMaterial?: Buffer | BinaryType;
};
export declare class ClientEncryption extends ShellApiWithMongoClass {
    _mongo: Mongo;
    _libmongocrypt: MongoCryptClientEncryption;
    constructor(mongo: Mongo);
    [asPrintable](): string;
    encrypt(encryptionId: BinaryType, value: any, algorithmOrEncryptionOptions: ClientEncryptionEncryptOptions['algorithm'] | ClientEncryptionEncryptOptions): Promise<BinaryType>;
    decrypt(encryptedValue: BinaryType): Promise<any>;
}
export declare class KeyVault extends ShellApiWithMongoClass {
    _mongo: Mongo;
    _clientEncryption: ClientEncryption;
    private _keyColl;
    constructor(clientEncryption: ClientEncryption);
    _init(): Promise<void>;
    [asPrintable](): string;
    createKey(kms: 'local', keyAltNames?: string[]): Promise<BinaryType>;
    createKey(kms: ClientEncryptionDataKeyProvider, legacyMasterKey: string, keyAltNames?: string[]): Promise<BinaryType>;
    createKey(kms: ClientEncryptionDataKeyProvider, options: MasterKey | DataKeyEncryptionKeyOptions | undefined): Promise<BinaryType>;
    createKey(kms: ClientEncryptionDataKeyProvider, options: MasterKey | DataKeyEncryptionKeyOptions | undefined, keyAltNames: string[]): Promise<BinaryType>;
    getKey(keyId: BinaryType): Promise<Document>;
    getKeyByAltName(keyAltName: string): Promise<Document>;
    getKeys(): Promise<Cursor>;
    deleteKey(keyId: BinaryType): Promise<DeleteResult | Document>;
    addKeyAlternateName(keyId: BinaryType, keyAltName: string): Promise<Document>;
    removeKeyAlternateName(keyId: BinaryType, keyAltName: string): Promise<Document>;
    rewrapManyDataKey(filter: Document, options?: Document): Promise<Document>;
    createDataKey(...args: Parameters<KeyVault['createKey']>): ReturnType<KeyVault['createKey']>;
    removeKeyAltName(...args: Parameters<KeyVault['removeKeyAlternateName']>): ReturnType<KeyVault['removeKeyAlternateName']>;
    addKeyAltName(...args: Parameters<KeyVault['addKeyAlternateName']>): ReturnType<KeyVault['addKeyAlternateName']>;
}
export {};
