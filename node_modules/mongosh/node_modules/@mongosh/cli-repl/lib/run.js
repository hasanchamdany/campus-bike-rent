"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
let fipsError;
if (process.argv.includes('--tlsFIPSMode')) {
    try {
        require('crypto').setFips(1);
    }
    catch (err) {
        fipsError = err;
    }
}
const index_1 = require("./index");
const config_directory_1 = require("./config-directory");
const crypt_library_paths_1 = require("./crypt-library-paths");
const tls_certificate_selector_1 = require("./tls-certificate-selector");
const history_1 = require("@mongosh/history");
const arg_parser_1 = require("@mongosh/arg-parser");
const module_1 = require("module");
const readline_1 = __importDefault(require("readline"));
const askcharacter_1 = __importDefault(require("askcharacter"));
const stream_1 = __importDefault(require("stream"));
const crypto_1 = __importDefault(require("crypto"));
(async () => {
    if (process.env.MONGOSH_RUN_NODE_SCRIPT) {
        process.argv.splice(1, 1);
        module_1.runMain(process.argv[1]);
        return;
    }
    let repl;
    let isSingleConsoleProcess = false;
    try {
        const options = (0, index_1.parseCliArgs)(process.argv);
        for (const warning of options._argParseWarnings) {
            console.warn(warning);
        }
        const { version } = require('../package.json');
        if (options.tlsFIPSMode) {
            if (!fipsError && !crypto_1.default.getFips()) {
                fipsError = new Error('FIPS mode not enabled despite requested');
            }
            if (fipsError) {
                if (process.config.variables.node_shared_openssl) {
                    console.error('Could not enable FIPS mode. Please ensure that your system OpenSSL installation');
                    console.error('supports FIPS, and see the mongosh FIPS documentation for more information.');
                }
                else {
                    console.error('Could not enable FIPS mode. This mongosh installation does not appear to');
                    console.error('support FIPS. Please see the mongosh FIPS documentation for more information.');
                }
                console.error('Error details:');
                console.error(fipsError);
                process.exit(1);
            }
        }
        if (options.help) {
            console.log(index_1.USAGE);
        }
        else if (options.version) {
            console.log(version);
        }
        else if (options.buildInfo) {
            console.log(JSON.stringify((0, index_1.buildInfo)(), null, '  '));
        }
        else if (options.smokeTests) {
            const smokeTestServer = process.env.MONGOSH_SMOKE_TEST_SERVER;
            const cryptLibraryOpts = options.cryptSharedLibPath ? [
                `--cryptSharedLibPath=${options.cryptSharedLibPath}`
            ] : [];
            if (process.execPath === process.argv[1]) {
                await (0, index_1.runSmokeTests)(smokeTestServer, process.execPath, ...cryptLibraryOpts);
            }
            else {
                await (0, index_1.runSmokeTests)(smokeTestServer, process.execPath, process.argv[1], ...cryptLibraryOpts);
            }
        }
        else {
            if (process.execPath === process.argv[1]) {
                process.removeAllListeners('warning');
            }
            if (process.env.CLEAR_SIGINT_LISTENERS) {
                process.removeAllListeners('SIGINT');
            }
            isSingleConsoleProcess = !!process.env.MONGOSH_FORCE_CONNECTION_STRING_PROMPT;
            if ((!options.connectionSpecifier &&
                process.platform === 'win32' &&
                process.stdin.isTTY &&
                process.stdout.isTTY) ||
                isSingleConsoleProcess) {
                try {
                    isSingleConsoleProcess || (isSingleConsoleProcess = require('get-console-process-list')().length === 1);
                }
                catch (_a) { }
                if (isSingleConsoleProcess) {
                    const result = await ask('Please enter a MongoDB connection string (Default: mongodb://localhost/): ');
                    if (result.trim() !== '') {
                        options.connectionSpecifier = result.trim();
                    }
                }
            }
            const connectionInfo = (0, arg_parser_1.generateConnectionInfoFromCliArgs)(options);
            connectionInfo.driverOptions = {
                ...connectionInfo.driverOptions,
                ...(0, tls_certificate_selector_1.getTlsCertificateSelector)(options.tlsCertificateSelector),
                driverInfo: { name: 'mongosh', version }
            };
            const title = `mongosh ${(0, history_1.redactURICredentials)(connectionInfo.connectionString)}`;
            process.title = title;
            setTerminalWindowTitle(title);
            const shellHomePaths = (0, config_directory_1.getStoragePaths)();
            const globalConfigPaths = (0, config_directory_1.getGlobalConfigPaths)();
            repl = new index_1.CliRepl({
                shellCliOptions: {
                    ...options,
                },
                getCryptLibraryPaths: crypt_library_paths_1.getCryptLibraryPaths,
                input: process.stdin,
                output: process.stdout,
                onExit: process.exit,
                shellHomePaths: shellHomePaths,
                globalConfigPaths: globalConfigPaths
            });
            await repl.start(connectionInfo.connectionString, connectionInfo.driverOptions);
        }
    }
    catch (e) {
        console.error(`${e === null || e === void 0 ? void 0 : e.name}: ${e === null || e === void 0 ? void 0 : e.message}`);
        if (repl !== undefined) {
            repl.bus.emit('mongosh:error', e, 'startup');
        }
        if (isSingleConsoleProcess) {
            process.stdout.write('Press any key to exit: ');
            await (0, askcharacter_1.default)({ input: process.stdin, output: process.stdout });
            process.stdout.write('\n');
        }
        process.exit(1);
    }
})();
function setTerminalWindowTitle(title) {
    var _a;
    if (!process.stdout.isTTY) {
        return;
    }
    const term = (_a = process.env.TERM) !== null && _a !== void 0 ? _a : '';
    if (/^(linux|xterm|rxvt)/.test(term)) {
        process.stdout.write(`\u001b]0;${title}\u0007`);
    }
    else if (/^screen/.test(term)) {
        process.stdout.write(`\u001bk${title}\u001b\\`);
    }
}
async function ask(prompt) {
    const stdinCopy = process.stdin.pipe(new stream_1.default.PassThrough());
    try {
        const readlineInterface = readline_1.default.createInterface({
            input: stdinCopy,
            output: process.stdout,
            prompt,
        });
        readlineInterface.prompt();
        for await (const line of readlineInterface) {
            return line;
        }
        return '';
    }
    finally {
        process.stdin.unpipe(stdinCopy);
    }
}
//# sourceMappingURL=run.js.map